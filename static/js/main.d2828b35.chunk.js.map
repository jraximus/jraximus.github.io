{"version":3,"sources":["images/avatar.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","links","map","val","key","className","onClick","goToSection","id","header","document","querySelector","anchor","toLowerCase","window","scrollTo","top","offsetTop","offsetHeight","behavior","Fragment","AppBar","Toolbar","ContactMe","Profile","lhs","rhs","forEach","tech","index","push","class","Avatar","alt","src","avatar","Splash","App","theme","createMuiTheme","palette","primary","main","ThemeProvider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,oC,iOCW3C,SAASC,EAAOC,GAGd,IAAMC,EAAQD,EAAMC,MAAMC,KAAI,SAACC,GAC7B,OAAQ,yBAAKC,IAAKD,EAAKE,UAAU,OAAOC,QAAS,kBAAMC,EAAYJ,KAAOA,MAGtEI,EAAc,SAACC,GACnB,IAAMC,EAASC,SAASC,cAAc,WAChCC,EAASF,SAASC,cAAT,WAA2BH,EAAGK,gBACzCD,GAAUH,GACZK,OAAOC,SAAS,CAACC,IAAKJ,EAAOK,UAAYR,EAAOS,aAAcC,SAAU,YAI5E,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASjB,UAAU,UACjB,yBAAKA,UAAU,QAAf,OACA,yBAAKA,UAAU,SAASJ,KAG5B,kBAACqB,EAAA,EAAD,OAKN,IAAMC,EAAY,WAChB,OACE,yBAAKf,GAAG,WAAR,kCAMEgB,EAAU,WAEd,IACIC,EAAM,GAAIC,EAAM,GASpB,MAVc,CAAC,8BAA+B,gBAAiB,QAAS,UAAW,QAAS,OAAQ,OAAQ,SAAU,QAAS,UAEzHC,SAAQ,SAACC,EAAMC,GACfA,EAAQ,IAAM,EAChBJ,EAAIK,KAAK,yBAAKzB,UAAU,mBAAkB,uBAAG0B,MAAM,4BAA+BH,IAElFF,EAAII,KAAK,yBAAKzB,UAAU,mBAAkB,uBAAG0B,MAAM,4BAA+BH,OAKpF,yBAAKpB,GAAG,UAAUH,UAAU,sBAC1B,uCACA,uBAAGA,UAAU,uBAAb,+BACA,6BACA,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,mBACb,kBAAC2B,EAAA,EAAD,CAAQC,IAAI,YAAYC,IAAKC,IAAQ9B,UAAU,gCAGjD,yBAAKA,UAAU,gCACb,yFACA,qTAEA,0HACA,uBAAGA,UAAU,kBACX,yBAAKA,UAAU,gCACZoB,GAEH,yBAAKpB,UAAU,gCACZqB,QASTU,EAAS,WACb,OACE,yBAAK/B,UAAU,qBACb,yBAAKA,UAAU,gBAAf,cAoCSgC,MA/Bf,WACE,IAEMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,cAOZ,OACE,kBAACC,EAAA,EAAD,CAAeL,MAAOA,GAEpB,kBAACvC,EAAD,CAAQE,MAhBE,CAAC,UAAW,aAAc,WAAY,aAiBhD,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKO,GAAG,cAAR,cAGA,yBAAKA,GAAG,YAAR,YAGA,kBAAC,EAAD,QC9GcoC,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASyC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2828b35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.e0e89c55.jpg\";","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport avatar from './images/avatar.jpg'\nimport './App.scss';\n\nfunction Header(props) {\n  \n\n  const links = props.links.map((val) => {\n    return (<div key={val} className=\"link\" onClick={() => goToSection(val)}>{val}</div>);\n  })\n\n  const goToSection = (id) => {\n    const header = document.querySelector('.header');\n    const anchor = document.querySelector(`#${id.toLowerCase()}`);\n    if (anchor && header) {\n      window.scrollTo({top: anchor.offsetTop - header.offsetHeight, behavior: 'smooth'});\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <AppBar>\n        <Toolbar className=\"header\">\n          <div className=\"name\">jr3</div>\n          <div className=\"links\">{links}</div>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n\nconst ContactMe = () => {\n  return (\n    <div id=\"contact\">\n      This is where you contact me!\n    </div>\n  );\n}\n\nconst Profile = () => {\n\n  const techs = ['Javascript(ES6+)/Typescript', 'HTML & (S)CSS', 'React', 'Angular', 'Redux', 'Java', 'Node', 'Python', 'Azure', 'Golang']\n  let lhs = [], rhs = [];\n  techs.forEach((tech, index) => {\n    if (index % 2 !== 0) {\n      lhs.push(<div className=\"flex flex--item\"><i class=\"fad fa-angle-right icon\"></i>{tech}</div>);\n    } else {\n      rhs.push(<div className=\"flex flex--item\"><i class=\"fad fa-angle-right icon\"></i>{tech}</div>);\n    }\n  })\n\n  return (\n    <div id=\"profile\" className=\"fullscreen section\">\n      <h2>Profile</h2>\n      <p className=\"section-description\">I build things for the web.</p>\n      <hr/>\n      <div className=\"flex flex--row section-contents\">\n        <div className=\"flex flex--item\">\n          <Avatar alt=\"James Rac\" src={avatar} className=\"avatar flex flex--centered\"/>\n        </div>\n        \n        <div className=\"flex profile-text flex--item\">\n          <p>Hi I'm James! Yes, those are my dogs, cute aren't they? :)</p>\n          <p>I'm a generalist webapp developer. I'm a senior programmer with skills that emphasize the front end. I love interesting problems and love even more to solve them.\n             I believe no matter the skill level, everyone should both mentor and be a mentor to keep improving their skill set.</p>\n          <p>Here are some of the technologies I'm currently working with professionally and personally:</p>\n          <p className=\"flex flex--row\">\n            <div className=\"flex flex--item flex--column\">\n              {lhs}\n            </div>\n            <div className=\"flex flex--item flex--column\">\n              {rhs}\n            </div>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Splash = () => {\n  return (\n    <div className=\"splash fullscreen\">\n      <div className=\"welcome-text\">Welcome!</div>\n    </div>\n  );\n}\n\nfunction App() {\n  const links = [\"Profile\", \"Experience\", \"Projects\", \"Contact\"]\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        // light: will be calculated from palette.primary.main,\n        main: '#171717',\n        // dark: will be calculated from palette.primary.main,\n        // contrastText: will be calculated to contrast with palette.primary.main\n      }\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      {/* <CssBaseline /> */}\n      <Header links={links}></Header>\n      <Splash></Splash>\n      <Profile></Profile>\n      <div id=\"experience\">\n        experience\n      </div>\n      <div id=\"projects\">\n        projects\n      </div>\n      <ContactMe></ContactMe>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}